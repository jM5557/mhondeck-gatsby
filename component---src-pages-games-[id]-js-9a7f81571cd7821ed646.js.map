{"version":3,"file":"component---src-pages-games-[id]-js-9a7f81571cd7821ed646.js","mappings":"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","sources":["webpack://MHOnDeck/./src/components/ImageGroup.js","webpack://MHOnDeck/./src/components/RecursiveRenderer.js","webpack://MHOnDeck/./src/pages/games/[id].js"],"sourcesContent":["// ImageGroup.js\r\nimport React, { useState } from \"react\";\r\nimport { UseModal } from \"./Modals\";\r\n\r\nconst ImageGroup = ({ groupName, images, folderPath }) => {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const { showModal, setShowModal, ModalComponent } = UseModal();\r\n\r\n  const downloadImage = (imageUrl) => {\r\n    const link = document.createElement('a');\r\n    link.href = imageUrl;\r\n\r\n    // Extract the filename from the image URL\r\n    const filename = imageUrl.split('/').pop();\r\n    link.download = filename;\r\n\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <div className={`group`}>\r\n      <h3>{groupName.charAt(0).toUpperCase() + groupName.slice(1)}</h3>\r\n      <div className=\"images-grid\">\r\n        {images.map((fileName, index) => (<>\r\n          <img\r\n            key={groupName + index}\r\n            className={groupName} // Add classname based on type\r\n            src={`/images/thumbs/${folderPath}/${fileName}`} // Construct image path\r\n            alt={fileName}\r\n            onClick={() => {\r\n              setSelectedImage(`/images/gallery/${folderPath}/${fileName}`);\r\n              setShowModal(!showModal)\r\n            }}\r\n          />\r\n        </>\r\n        ))}\r\n      </div>\r\n      <ModalComponent className=\"image-modal\">\r\n        <>\r\n          <div className=\"image-wrapper flex align-c space-c\">\r\n            <img\r\n              className={\"modal-image \" + groupName} // Add classname based on type\r\n              src={selectedImage} // Construct image path\r\n              alt={selectedImage}\r\n            />\r\n          </div>\r\n          <br/>\r\n          <button \r\n            onClick={() => downloadImage(selectedImage)}\r\n            className=\"cta secondary\"\r\n          >Download</button>\r\n        </>\r\n      </ModalComponent>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGroup;\r\n","import React from \"react\";\r\nimport ImageGroup from \"./ImageGroup\";\r\nimport platforms from \"@data/platforms\";\r\n\r\nconst RecursiveRenderer = ({ data, folderPath }) => {\r\n  return (\r\n    <>\r\n      {Object.keys(data).map(key => {\r\n        const value = data[key];\r\n\r\n        const boxTitle = \r\n            Object.keys(platforms).includes(key) \r\n                ? platforms[key].fullname\r\n                : key.charAt(0).toUpperCase() + key.slice(1);\r\n\r\n        // If the value is an array, render it using ImageGroup\r\n        if (Array.isArray(value) && value.length > 0) {\r\n          return (\r\n            <ImageGroup \r\n              key={key} \r\n              groupName={key} \r\n              images={value} \r\n              folderPath={folderPath} \r\n            />\r\n          );\r\n        }\r\n\r\n        if (Array.isArray(value) && value.length === 0) {\r\n            return (<></>)\r\n        }\r\n        \r\n        // If the value is an object, render recursively\r\n        if (typeof value === \"object\" && value !== null) {\r\n          return (\r\n            <div key={key} className={`${key} box`}>\r\n              <h3>{boxTitle}</h3>\r\n              <div className=\"subfolder-images\">\r\n                <RecursiveRenderer \r\n                  data={value} \r\n                  folderPath={`${folderPath}/${key}`} \r\n                />\r\n              </div>\r\n            </div>\r\n          );\r\n        }\r\n        \r\n        return null; // Skip rendering if it's neither an array nor an object\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecursiveRenderer;\r\n","import React from \"react\";\r\nimport Seo from \"@components/seo\";\r\nimport data from \"@data/output.json\";\r\nimport games from \"@data/games.json\";\r\nimport RecursiveRenderer from \"@components/RecursiveRenderer\";\r\nimport \"@styles/games.scss\";\r\nimport \"@styles/games/install.scss\";\r\nimport Header from \"@components/header\";\r\nimport Footer from \"@components/footer\";\r\nimport { UseModal } from \"@components/Modals\";\r\nimport SteamGridArtInstallation from \"@content/SteamGridArtInstallation.mdx\";\r\nimport DownloadWindow from \"../../components/DownloadWindow\";\r\n\r\n\r\nconst GamePage = ({ params }) => {\r\n  const { id } = params;\r\n  const gameData = data[id];\r\n\r\n  const { showModal, setShowModal, ModalComponent } = UseModal();\r\n  const { \r\n    showModal: downloadModal, \r\n    setShowModal: setDownloadModal, \r\n    ModalComponent: DownloadModalComponent \r\n  } = UseModal();\r\n\r\n  if (!gameData) {\r\n    return <p>Game not found</p>;\r\n  }\r\n\r\n  const findHeroImage = (folderData, folderPath) => {\r\n    if (gameData.hero && gameData.hero.length > 0) {\r\n      return {\r\n        image: gameData.hero[0],\r\n        path: `/images/gallery/${id}/${gameData.hero[0]}`\r\n      };\r\n    }\r\n\r\n    for (const subfolder of Object.keys(folderData)) {\r\n      if (typeof folderData[subfolder] === \"object\" && !Array.isArray(folderData[subfolder])) {\r\n        if (folderData[subfolder].hero && folderData[subfolder].hero.length > 0) {\r\n          return {\r\n            image: folderData[subfolder].hero[0],\r\n            path: `/images/gallery/${folderPath}/${subfolder}/${folderData[subfolder].hero[0]}` // Construct path for found hero image\r\n          };\r\n        }\r\n\r\n        const nestedHeroImage = findHeroImage(folderData[subfolder], `${folderPath}/${subfolder}`);\r\n        if (nestedHeroImage) {\r\n          return nestedHeroImage;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const heroData = findHeroImage(gameData, id);\r\n  const heroImagePath = heroData ? heroData.path : null;\r\n\r\n  return (\r\n    <main\r\n      className=\"game-page standard-page\"\r\n    >\r\n      <section\r\n        id=\"hero\"\r\n        style={{\r\n          backgroundImage: heroImagePath ? `url(${heroImagePath})` : \"none\", // Set hero image as background with the full path\r\n          backgroundSize: \"cover\"\r\n        }}\r\n      >\r\n        <Header />\r\n\r\n        <h1>{games[id].title}</h1>\r\n\r\n        <div className=\"btns\">\r\n          <button \r\n            type=\"button\" \r\n            onClick={() => setShowModal(!showModal)}\r\n            className=\"cta secondary\"\r\n          >\r\n            Installation\r\n          </button>\r\n          <a\r\n              href = \"/games\"\r\n              className=\"cta secondary\"\r\n          >\r\n              More Games\r\n          </a>\r\n        </div>\r\n      </section>\r\n\r\n      <div className=\"artwork\">\r\n        <div className=\"artwork-text\">\r\n          <div>\r\n            <h2>Steam Game Artwork</h2>\r\n          </div>\r\n\r\n          { (games[id].artwork) &&\r\n            <button \r\n              type = \"button\"\r\n              className=\"cta\"\r\n              onClick={() => setDownloadModal(true) }\r\n            >\r\n              Download Pack\r\n            </button>\r\n          }\r\n        </div>\r\n        <RecursiveRenderer data={gameData} folderPath={id} />\r\n      </div>\r\n\r\n      <ModalComponent>\r\n        <SteamGridArtInstallation />\r\n      </ModalComponent>\r\n        \r\n      { (games[id].artwork) &&\r\n        <DownloadModalComponent>\r\n          <DownloadWindow\r\n            downloadLink={games[id].artwork.url}\r\n            title={games[id].title}\r\n          />\r\n        </DownloadModalComponent>\r\n      }\r\n\r\n      <Footer />\r\n\r\n      <Seo title = { games[id].title } />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n"],"names":["_ref","groupName","images","folderPath","selectedImage","setSelectedImage","useState","showModal","setShowModal","ModalComponent","UseModal","React","className","charAt","toUpperCase","slice","map","fileName","index","key","src","alt","onClick","imageUrl","link","document","createElement","href","filename","split","pop","download","body","appendChild","click","removeChild","downloadImage","RecursiveRenderer","data","Object","keys","value","boxTitle","platforms","includes","fullname","Array","isArray","length","ImageGroup","params","id","gameData","downloadModal","setDownloadModal","DownloadModalComponent","findHeroImage","folderData","hero","image","path","subfolder","nestedHeroImage","heroData","heroImagePath","style","backgroundImage","backgroundSize","Header","games","title","type","artwork","SteamGridArtInstallation","DownloadWindow","downloadLink","url","Footer","Seo"],"sourceRoot":""}