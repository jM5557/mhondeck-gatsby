{"version":3,"file":"component---src-pages-games-[id]-js-71f79dae770a9d1104dc.js","mappings":"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","sources":["webpack://MHOnDeck/./src/components/PlatformInfo.js","webpack://MHOnDeck/./src/components/ImageGroup.js","webpack://MHOnDeck/./src/components/RecursiveRenderer.js","webpack://MHOnDeck/./src/pages/games/[id].js"],"sourcesContent":["import React from \"react\";\r\nimport platformData from \"@data/platforms.json\"; // Adjust the path as necessary\r\nimport games from \"@data/games.json\"; // Adjust the path as necessary\r\n\r\nconst PlatformInfo = ({ gameId }) => {\r\n  // Get the platforms associated with the gameId\r\n  const platforms = games[gameId].platforms;\r\n\r\n  // If there are no platforms, return null\r\n  if (!platforms || platforms.length === 0) {\r\n    return <p>No platforms available for this game.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"platform-info\">\r\n      <h3>Platforms</h3>\r\n      <div className=\"platforms-container\">\r\n        {platforms.map(platformKey => {\r\n          const platform = platformData[platformKey]; // Get platform details\r\n\r\n          if (!platform) return null; // Skip if platform data is not found\r\n\r\n          return (\r\n            <div key={platformKey} className=\"platform-box\">\r\n              <h4>{platform.fullname}</h4>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlatformInfo;\r\n","// ImageGroup.js\r\nimport React, { useState } from \"react\";\r\nimport { UseModal } from \"./Modals\";\r\n\r\nconst ImageGroup = ({ groupName, images, folderPath }) => {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const { showModal, setShowModal, ModalComponent } = UseModal();\r\n\r\n  return (\r\n    <div className={`group`}>\r\n      <h3>{groupName.charAt(0).toUpperCase() + groupName.slice(1)}</h3>\r\n      <div className=\"images-grid\">\r\n        {images.map((fileName, index) => (<>\r\n          <img\r\n            key={groupName + index}\r\n            className={groupName} // Add classname based on type\r\n            src={`/images/gallery/${folderPath}/${fileName}`} // Construct image path\r\n            alt={fileName}\r\n            onClick={() => {\r\n              setSelectedImage(`/images/gallery/${folderPath}/${fileName}`);\r\n              setShowModal(!showModal)\r\n            }}\r\n          />\r\n        </>\r\n        ))}\r\n      </div>\r\n      <ModalComponent className=\"image-modal\">\r\n        <>\r\n          <div className=\"image-wrapper flex align-c space-c\">\r\n            <img\r\n              className={\"modal-image \" + groupName} // Add classname based on type\r\n              src={selectedImage} // Construct image path\r\n              alt={selectedImage}\r\n            />\r\n          </div>\r\n        </>\r\n      </ModalComponent>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGroup;\r\n","import React from \"react\";\r\nimport ImageGroup from \"./ImageGroup\";\r\nimport platforms from \"@data/platforms\";\r\n\r\nconst RecursiveRenderer = ({ data, folderPath }) => {\r\n  return (\r\n    <>\r\n      {Object.keys(data).map(key => {\r\n        const value = data[key];\r\n\r\n        const boxTitle = \r\n            Object.keys(platforms).includes(key) \r\n                ? platforms[key].fullname\r\n                : key.charAt(0).toUpperCase() + key.slice(1);\r\n\r\n        // If the value is an array, render it using ImageGroup\r\n        if (Array.isArray(value) && value.length > 0) {\r\n          return (\r\n            <ImageGroup \r\n              key={key} \r\n              groupName={key} \r\n              images={value} \r\n              folderPath={folderPath} \r\n            />\r\n          );\r\n        }\r\n\r\n        if (Array.isArray(value) && value.length === 0) {\r\n            return (<></>)\r\n        }\r\n        \r\n        // If the value is an object, render recursively\r\n        if (typeof value === \"object\" && value !== null) {\r\n          return (\r\n            <div key={key} className={`${key} box`}>\r\n              <h3>{boxTitle}</h3>\r\n              <div className=\"subfolder-images\">\r\n                <RecursiveRenderer \r\n                  data={value} \r\n                  folderPath={`${folderPath}/${key}`} \r\n                />\r\n              </div>\r\n            </div>\r\n          );\r\n        }\r\n        \r\n        return null; // Skip rendering if it's neither an array nor an object\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecursiveRenderer;\r\n","import React from \"react\";\r\nimport Seo from \"@components/seo\";\r\nimport data from \"@data/output.json\";\r\nimport games from \"@data/games.json\";\r\nimport PlatformInfo from \"@components/PlatformInfo\";\r\nimport RecursiveRenderer from \"@components/RecursiveRenderer\";\r\nimport \"@styles/games.scss\";\r\nimport Header from \"@components/header\";\r\nimport Footer from \"@components/footer\";\r\nimport { UseModal } from \"@components/Modals\";\r\nimport SteamGridArtInstallation from \"@content/SteamGridArtInstallation.mdx\";\r\nimport DownloadWindow from \"../../components/DownloadWindow\";\r\n\r\n\r\nconst GamePage = ({ params }) => {\r\n  const { id } = params;\r\n  const gameData = data[id];\r\n\r\n  const { showModal, setShowModal, ModalComponent } = UseModal();\r\n  const { \r\n    showModal: downloadModal, \r\n    setShowModal: setDownloadModal, \r\n    ModalComponent: DownloadModalComponent \r\n  } = UseModal();\r\n\r\n  if (!gameData) {\r\n    return <p>Game not found</p>;\r\n  }\r\n\r\n  const findHeroImage = (folderData, folderPath) => {\r\n    if (gameData.hero && gameData.hero.length > 0) {\r\n      return {\r\n        image: gameData.hero[0],\r\n        path: `/images/gallery/${id}/${gameData.hero[0]}`\r\n      };\r\n    }\r\n\r\n    for (const subfolder of Object.keys(folderData)) {\r\n      if (typeof folderData[subfolder] === \"object\" && !Array.isArray(folderData[subfolder])) {\r\n        if (folderData[subfolder].hero && folderData[subfolder].hero.length > 0) {\r\n          return {\r\n            image: folderData[subfolder].hero[0],\r\n            path: `/images/gallery/${folderPath}/${subfolder}/${folderData[subfolder].hero[0]}` // Construct path for found hero image\r\n          };\r\n        }\r\n\r\n        const nestedHeroImage = findHeroImage(folderData[subfolder], `${folderPath}/${subfolder}`);\r\n        if (nestedHeroImage) {\r\n          return nestedHeroImage;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const heroData = findHeroImage(gameData, id);\r\n  const heroImagePath = heroData ? heroData.path : null;\r\n\r\n  return (\r\n    <main\r\n      className=\"game-page\"\r\n    >\r\n      <section\r\n        id=\"hero\"\r\n        style={{\r\n          backgroundImage: heroImagePath ? `url(${heroImagePath})` : \"none\", // Set hero image as background with the full path\r\n          backgroundSize: \"cover\"\r\n        }}\r\n      >\r\n        <Header />\r\n\r\n        <h1>{games[id].title}</h1>\r\n        <PlatformInfo gameId={id} />\r\n\r\n        <button \r\n          type=\"button\" \r\n          onClick={() => setShowModal(!showModal)}\r\n          className=\"cta secondary\"\r\n        >\r\n          Installation\r\n        </button>\r\n      </section>\r\n\r\n      <div className=\"artwork\">\r\n        <div className=\"artwork-text\">\r\n          <div>\r\n            <h2>Steam Grid Artwork</h2>\r\n            <h3>Use with the SteamGridDB Plugin for Decky Loader</h3>\r\n          </div>\r\n\r\n          { (games[id].artwork) &&\r\n            <button \r\n              type = \"button\"\r\n              className=\"cta\"\r\n              onClick={() => setDownloadModal(true) }\r\n            >\r\n              Download Pack\r\n            </button>\r\n          }\r\n        </div>\r\n        <RecursiveRenderer data={gameData} folderPath={id} />\r\n      </div>\r\n\r\n      <ModalComponent>\r\n        <SteamGridArtInstallation />\r\n      </ModalComponent>\r\n        \r\n      { (games[id].artwork) &&\r\n        <DownloadModalComponent>\r\n          <DownloadWindow\r\n            downloadLink={games[id].artwork.url}\r\n            title={games[id].title}\r\n            fileSize={games[id].artwork.fileSize}\r\n          />\r\n        </DownloadModalComponent>\r\n      }\r\n\r\n      <Footer />\r\n\r\n      <Seo title = { games[id].title } />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n"],"names":["gameId","platforms","games","length","className","map","platformKey","platform","platformData","key","fullname","groupName","images","folderPath","selectedImage","setSelectedImage","useState","showModal","setShowModal","ModalComponent","UseModal","charAt","toUpperCase","slice","fileName","index","src","alt","onClick","RecursiveRenderer","data","Object","keys","value","boxTitle","includes","Array","isArray","params","id","gameData","downloadModal","setDownloadModal","DownloadModalComponent","findHeroImage","folderData","hero","image","path","subfolder","nestedHeroImage","heroData","heroImagePath","style","backgroundImage","backgroundSize","title","type","artwork","SteamGridArtInstallation","DownloadWindow","downloadLink","url","fileSize"],"sourceRoot":""}